<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#>
 <#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile =@"..\\Lottery.Model\\Lottery.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
using Lottery.IDAL;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace Lottery.DALFactory
{
    public partial class AbstractFactory
    {<#foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{   #>		
	    public static I<#=entity.Name#>DAL Create<#=entity.Name#>DAL()
        {
            string classFulleName = ConfigurationManager.AppSettings["NameSpace"] + ".<#=entity.Name#>DAL";
            //object obj = Assembly.Load(ConfigurationManager.AppSettings["DALAssembly"]).CreateInstance(classFulleName, true);
            var obj  = CreateInstance(ConfigurationManager.AppSettings["DALAssemblyPath"], classFulleName);
            return obj as I<#=entity.Name#>DAL;
        }
<#}#>
	}
	
}